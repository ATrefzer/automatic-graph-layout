on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'latest*' # Push events to matching latest*, i.e. v1.0, v20.15.10

name: Create Release

jobs:
  build:
    name: Create Release
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false deploy:
          
  build_and_upload:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v1
      name: Checkout Code
      
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1
       
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.0.2
      env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'     

    - name: Restore NuGet Packages
      run: nuget restore GraphLayout/GraphLayout.sln
 
    - name: Build agl.csproj
      run: msbuild GraphLayout\tools\agl\agl.csproj /p:Configuration=Release /p:Platform="AnyCPU" /p:DeployOnBuild=true /p:PublishProfile=FolderProfile

    - name: aglzip
      run: 7z a agl.zip GraphLayout/tools/agl/bin/Release -r

    - name: get release
    - uses: octokit/request-action@v2.x
      id: get_latest_release
      with:
          route: GET /repos/:repository/releases/latest
          repository: ${{ github.repository }}
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: get upload url
      id: get_upload_url
      run: |
        url=$(echo "$response" | jq -r '.upload_url')
        echo "::set-output name=url::$url"
      env: 
          response:  ${{ steps.get_latest_release.outputs.data }}
     
    - name: Upload a Release Asset
      uses: actions/upload-release-asset@v1.0.2
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        # The URL for uploading assets to the release
        upload_url:  ${{steps.get_upload_url.outputs.url}}
        # The path to the asset you want to upload
        asset_path: agl.zip
        # The name of the asset you want to upload
        asset_name: agl.zip
        # The content-type of the asset you want to upload. See the supported Media Types here: https://www.iana.org/assignments/media-types/media-types.xhtml for more information
        asset_content_type: application/zipx